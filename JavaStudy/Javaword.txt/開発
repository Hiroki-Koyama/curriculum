■ウォーターフォール開発
    開発手順を1つずつ確認しながら工程を進めていく手法
    開発を各工程に分けて進めますが、次のフェーズに進んでしまうと後戻りができない
    ひとつひとつの工程に抜け漏れがないかどうか厳重に管理しながら進めていく
    品質を重視するケース
    プロジェクトの規模が大きいケース
    メリット
      スケジュールを立てやすい
      進捗を比較的管理しやすい
      予算やSE（システムエンジニア）の手配がスムーズに行える
    デメリット
      プロジェクト開始の要件定義や基本設計でしか要望をヒアリング出来ないため進行中に問題発生した時に手間がかかる
      計画管理資料であるWBSの作成にも時間がかかる
      成果物作成に時間がかかる
    手順
      ①要件定義 ②基本設定 ③詳細設定 ④実装 ⑤単体テスト ⑥結合テスト ⑦総合テスト ⑧受入テスト


■アジャイル開発
    クライアントの要望に応えるシステムをできる限り素早くリリースする開発手法
    クライアントのビジネスの始動を早めようという目的がある
    開発メンバーがシステムにおける優先度に順位をつけ、短い期間での納品を目指して動く
    開発の途中で仕様の変更や追加が予想されるプロジェクトに向いている
    手順
      ①計画 ②設計 ③実装 ④テスト を繰り返し行う
    スクラム手法
      チーム間のコミュニケーションを重視している点が特徴
    エクストリーム・プログラミング（XP）手法
      事前に立てた計画よりも途中変更などの柔軟性を重視する
    ユーザー機能駆動開発（FDD）手法
      実際に動作するソフトウェアを適切な間隔で繰り返す手法
      顧客にとっての機能価値（feature）という観点で開発が進められているのが特徴
    メリット
      開発期間の短縮
      仕様の変更や追加が可能
      不具合が発覚した際に戻る工数が少ない
    デメリット
      テストやフィードバックで変更・追加を加えていくことで、当初の計画からズレてしまう恐れがある
      スケジュール管理が難しい


■マイグレーション
    システム、データなどを別の環境、プラットフォームに移転したり、新しい環境に切り替えたりする意味
    古いものから新しいものへ移すこと


■デグレーション
    直したはずのバグが復活していたり、前はなかったはずのバグがあったり、実装したはずの機能がなくなっている状態のこと


■デプロイ
    配置、配備するという意味
    完成したプログラムを利用できる状態にすること
    例えば
      完成したプログラムをサーバーにアップロードし、該当のサーバー環境で利用可能にする
      ソフトウェアをインストールする作業など


■コンフリクト
    主張が衝突、不一致という意味
    同じクラス名、変数名などを定義していて、両者を同時に利用できない状態になってしまうこと
    複数のプログラムが同じデータを使おうとしていること


■環境
  ・開発環境（ローカル）
      個人のコンピューター内に構築された環境(プログラムが動く)のこと
      チーム開発している場合は後で共有などできる
      個人のコンピュータとは違うOSを使った作業がしたい場合は、仮想化ソフトウェアを使って仮想環境を構築する必要がある

  ・検証環境（ステージング）
      検証環境
        開発し終わってリリース予定の機能がちゃんと動くかテストするための環境
        開発環境と検証環境を分けて用意することで、テスト中のシステム状態を変更することなく並行して別の開発を進めることが出来るというメリットがある
        「Quality Assurance」と呼ばれ「QA環境」とも言う
      ステージング環境
        リリース予定をしている本番環境とほぼ同一の環境
        バグの切り取りが行われており、いつでもリリースできるよ！状態の機能を最終チェックする

  ・本番環境
        サービス提供の、実運用を行う環境
        商用環境・プロダクション環境とも呼ぶ
        本番環境はお客様の所有物

      ローカル環境で開発したアプリケーションやWebサイトを、インターネット上に公開するには
        ①サーバーを準備する
        ②FTPソフトを使ってアップロードする


■設計書／仕様書
  ・要件定義
      お客様の要求をいかにシステム化していくかを定義すること
      要求にある細かな動作や、それに伴ってユーザーが行いそうなエラー動作までを想定して、ひとつひとつをプログラムの動作でイメージしなければならない

  ・基本設計書
      システムを外から見たときどういう動きをするか（＝外部設計、What）を決めるもの
      操作画面や操作方法、データ出力など、ユーザーから見えるインターフェース部分の仕様を決定し、セキュリティや運用規定、システム開発のスケジュールや費用などを検討し、ユーザーに向けた仕様を設計する

  ・詳細設計書
      基本設計で決められた動きを、どうやって実現するか（＝内部設計、How）を決めるもの
      プログラマーが理解できる設計書を作成すること

    仕様書と設計書の違い
      仕様書は 、「何を作るのか？」を説明した資料、(結果)
      設計書は 、「どうやって作るの？」を説明した資料、(過程)


■テスト
  ・単体テスト（UT）(ユニットテスト)
      クラスやメソッド、関数、プロシージャなど、言語仕様上ほかのプログラムから一つのまとまりとして扱われる最小の単位ごとに行われるテストのこと

  ・結合テスト（CT／IT）(/)

  ・総合テスト（ST）
■エビデンス／証跡
■データパッチ
■Access
■マクロ
  ・VBA
■GAS（Google Apps Script）
■API
  ・WEB API
  ・REST API
  ・SOAP
■Ajax
  ・XML
  ・JSON
  ・ステータスコード
  ・クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
■バリデーション
■データ連携
  ・Daemon
  ・CRON
  ・バッチ
  ・ログ
  ・CSV
  ・TSV
■プルリクエスト（マージリクエスト）